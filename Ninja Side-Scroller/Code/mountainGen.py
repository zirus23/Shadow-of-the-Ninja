
# generates a closed list of nodes to be used for pygame.draw.polygon

import pygame
import math
import random
import time as global_time

class MountainRange(object):
    def __init__(self, startX, height=300, length = 1280*5, foot=720, noise=10, color = (30,30,30)):
        self.height = height
        self.length = length
        # override value
        self.foot = 720
        self.startX = startX
        self.layer = random.randint(0,2)
        self.color = color
        # noise between 0 and 20 (more noise = more distorted mountains)
        self.noise = noise
        # self.nodes stores all points
        self.nodes = [(startX, foot)] + self.generateNoiseMountain()
        
    # Mountain generated by Perlin Noise
    def generateNoiseMountain(self):
        nodes = []        
        # Returns numbers between 1 and 0
        def rand():
            M = 4294967296
            # A - 1 should be divisible by m's prime factors
            A = 1664525
            # c and m should be co-prime
            C = 1
            z = math.floor(random.random() * M)
            z = (A * z + C) % M
            return z / M

        def interpolate(a, b, x):
            ft = x * math.pi
            f = (1 - math.cos(ft)) * 0.5
            return a * (1 - f) + b * f

        x = self.startX - 1
        y = self.foot
        amp = self.height # amplitude
        wl = 300 - 10*self.noise # wavelength
        fq = 1 / wl # frequency
        a = rand()
        b = rand()
        while x < self.length:
            x += 1
            if x%wl == 0:
                a = b
                b = rand()
                y = self.height/2 + a * amp
            else:
                y = self.height/2 + interpolate(a, b, (x%wl)/wl) * amp            
            nodes.append((int(x), int(y)))
        # fix endpoint
        end = (self.length+self.startX, self.foot)
        nodes.append(end)
        nodes.append((self.startX, self.foot))
        return nodes

    def drawSelf(self, screen, scrollX, drawPercent = 100):
        drawPercent = 100
        self.nodes.append(self.nodes[0])
        color = self.color
        scrolledNodes = []
        for node in self.nodes:
            scrolledNodes.append((node[0] - scrollX, node[1]))

        pygame.draw.polygon(screen, color, scrolledNodes, 0)
        